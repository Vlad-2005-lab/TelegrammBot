# -*- coding: utf-8 -*-

# import random
import telebot
import pdfcrowd
from emoji import emojize
from telebot import types
from data.banned import Ban
from data.people import People
# from data.boss import Boss
from data.nejronka import Data
from data import db_session
import time
import datetime
import re
import numpy as np

SMILE = ['‚Ü©', "üè†"]
SINONIMS = {'python': {'–ø–∏—Ç–æ–Ω', "–ø–∞–π—Ç–æ–Ω", 'pyton', "piton", "puthon", "python"},
            'frontend': {'—Ñ—Ä–æ–Ω—Ç—ç–Ω–¥', "—Ñ—Ä–æ–Ω—Ç-—ç–Ω–¥", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "—Ñ—Ä–æ–Ω—Ç-–µ–Ω–¥", "front", "front-end", "frontend"},
            'backend': {'–±—ç–∫—ç–Ω–¥', '–±—ç–∫–µ–Ω–¥', "–±—ç–∫-—ç–Ω–¥", "–±–µ–∫–µ–Ω–¥", "–±–µ–∫–µ–Ω–¥-–µ–Ω–¥", "back", "back-end", "backend"},
            'java': {'—è–≤–∞', "–∂–∞–≤–∞", "–¥–∂–∞–≤–∞", 'java'},
            "javascript": {'javascript', "js", "java-script"},
            "web": {"web", '–≤–µ–±', "–≤—ç–±"},
            '1c': {'1c', '1—Å'}
            }
jobs = {"–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 'java', '4th dimension/4d', 'abap', 'abc', 'actionscript', 'ada', 'agilent vee',
        'algol',
        'alice',
        'angelscript', 'apex', 'apl', 'applescript', 'arc', 'arduino', 'asp', 'aspectj', 'assembly',
        'atlas', 'augeas', 'autohotkey', 'autoit', 'autolisp', 'automator', 'avenue', 'awk', 'bash',
        '(visual) basic', 'bc', 'bcpl', 'beta', 'blitzmax', 'boo', 'bourne shell', 'bro', 'c', 'c shell',
        'c#', 'c++', 'c++/cli', 'c-omega', 'caml', 'ceylon', 'cfml', 'cg', 'ch', 'chill', 'cil',
        'cl (os/400)', 'clarion', 'clean', 'clipper', 'clojure', 'clu', 'cobol', 'cobra', 'coffeescript',
        'coldfusion', 'comal', 'common lisp', 'coq', 'ct', 'curl', 'd', 'dart', 'dcl', 'dcpu-16 asm',
        'delphi/object pascal', 'dibol', 'dylan', 'e', 'ec', 'ecl', 'ecmascript', 'egl', 'eiffel', 'elixir',
        'emacs lisp', 'erlang', 'etoys', 'euphoria', 'exec', 'f#', 'factor', 'falcon', 'fancy', 'fantom',
        'felix', 'forth', 'fortran', 'fortress', '(visual) foxpro', 'gambas', 'gnu octave', 'go',
        'google appsscript', 'gosu', 'groovy', 'haskell', 'haxe', 'heron', 'hpl', 'hypertalk', 'icon',
        'idl', 'inform', 'informix-4gl', 'intercal', 'io', 'ioke', 'j', 'j#', 'jade', 'java',
        'java fx script', 'javascript', 'jscript', 'jscript.net', 'julia', 'korn shell', 'kotlin',
        'labview', 'ladder logic', 'lasso', 'limbo', 'lingo', 'lisp', 'logo', 'logtalk', 'lotusscript',
        'lpc', 'lua', 'lustre', 'm4', 'mad', 'magic', 'magik', 'malbolge', 'mantis', 'maple', 'mathematica',
        'matlab', 'max/msp', 'maxscript', 'mel', 'mercury', 'mirah', 'miva', 'ml', 'monkey', 'modula-2',
        'modula-3', 'moo', 'moto', 'ms-dos batch', 'mumps', 'natural', 'nemerle', 'nimrod', 'nqc', 'nsis',
        'nu', 'nxt-g', 'oberon', 'object rexx', 'objective-c', 'objective-j', 'ocaml', 'occam', 'ooc',
        'opa', 'opencl', 'openedge abl', 'opl', 'oz', 'paradox', 'parrot', 'pascal', 'perl', 'php', 'pike',
        'pilot', 'pl/i', 'pl/sql', 'pliant', 'postscript', 'pov-ray', 'powerbasic', 'powerscript',
        'powershell', 'processing', 'prolog', 'puppet', 'pure data', 'python', 'q', 'r', 'racket',
        'realbasic', 'rebol', 'revolution', 'rexx', 'rpg (os/400)', 'ruby', 'rust', 's', 's-plus', 'sas',
        'sather', 'scala', 'scheme', 'scilab', 'scratch', 'sed', 'seed7', 'self', 'shell', 'signal',
        'simula', 'simulink', 'slate', 'smalltalk', 'smarty', 'spark', 'spss', 'sqr', 'squeak', 'squirrel',
        'standard ml', 'suneido', 'supercollider', 'tacl', 'tcl', 'tex', 'thinbasic', 'tom', 'transact-sql',
        'turing', 'typescript', 'vala/genie', 'vbscript', 'verilog', 'vhdl', 'viml', 'visual basic .net',
        'webdna', 'whitespace', 'x10', 'xbase', 'xbase++', 'xen', 'xpl', 'xslt', 'xquery', 'yacc', 'yorick',
        'z shell', 'css', 'html', 'js', '–≤–µ—Ä—Å—Ç–∫–∞', 'crm', 'gulp', 'sass', 'vue', '1c', '1—Å', 'sql', '–æ–æ–ø',
        'web', 'wordpress', 'seo', 'git', 'react', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'backend', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö', 'mvc',
        '—Ñ—Ä–æ–Ω—Ç—ç–Ω–¥', 'developer', 'frontend', 'junior', 'middle', 'senior', 'django', 'flask', 'swift',
        'desktop', 'diy', 'pet', '–≥–µ–π–º–¥–µ–≤', 'gamedev', '.net', 'front-end', 'wpf', 'excel', 'cisco', 'aws',
        'server', 'xml', 'android', 'json', '–∞–Ω–¥—Ä–æ–∏—Ç', 'jquery', 'bootstrap', 'bitrix', 'laravel',
        'symfony', 'codeigniter', 'yii', 'phalcon', 'cakephp', 'zend', 'slim', 'fuelphp', 'phpixie',
        'joomla', 'bitrix', 'drupal', 'wordpress', 'opencart', '–ø–∏—Ç–æ–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'}
bot = telebot.TeleBot(open('data/media/token.txt').read())
print('\033[35mStarting.....')
count = -1
history = True
print('\033[35mConnecting to db....')
try:
    db_session.global_init("db/resume.sqlite")
except Exception:
    db_session.global_init("/home/AVI2005/TelegrammBot/db/resume.sqlite")
print('\033[35mDb was conected...')


def tconv(x):
    """
    :param x: int; —Ö–∑ —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è, –≤—Ä–æ–¥–µ —Å–µ–∫—É–Ω–¥—ã
    :return: str; –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—ã–≥–ª—è–¥–µ—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    """
    return time.strftime("%H:%M:%S %d.%m.%Y", time.localtime(x))


def log(message=None, where='ne napisal', full=False, comments="None"):
    """[
    :param message: class; –æ—Ç–≤–µ—Ç –∏–∑ —Ç–≥(message_handler)
    :param where: str; –º–µ—Å—Ç–æ(–∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏) –≥–¥–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    :param full: True/False
    :param comments: str; —Ö–∑, –ª—é–±–æ–π –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π
    :return: –≤ –∫–æ–Ω—Å–æ–ª—å –ø–∏—à–µ—Ç –ª–æ–≥
    """
    global count, history
    count += 1
    if history:
        history = False
        print("""\033[33mWriting history started:\033[30m""")
    elif full:
        try:
            print(f"""\033[33m{"-" * 100}
time: \033[36m{tconv(message.date)}\033[33m
log ‚Ññ{count}
from: {where}
full: {full}
id: \033[36m{message.from_user.id}\033[33m
username: \033[36m{message.from_user.username}\033[33m
first_name(–∏–º—è): \033[36m{message.from_user.first_name}\033[33m
last_name(—Ñ–∞–º–∏–ª–∏—è): \033[36m{message.from_user.last_name}\033[33m
text: {message.text}
message: \033[35m{message}\033[33m
comments: \033[31m{comments}\033[33m""")
        except Exception as er:
            print(f"""\033[31m{"-" * 100}\n!–æ—à–∏–±–∫–∞, –ª–æ–≥ ‚Ññ{count}\n message: {message}
where: {where}
full: {full}\033
comments: {comments}
error: {er}[0m""")
    else:
        try:
            print(f"""\033[33m{"-" * 100}
time: \033[36m{tconv(message.date)}\033[33m
log ‚Ññ{count}
from: {where}
full: {full}
id: \033[36m{message.from_user.id}\033[33m
username: \033[36m{message.from_user.username}\033[33m
first_name(–∏–º—è): \033[36m{message.from_user.first_name}\033[33m
last_name(—Ñ–∞–º–∏–ª–∏—è): \033[36m{message.from_user.last_name}\033[33m
text: \033[35m{message.text}\033[33m
comment: {comments}\033[0m""")
        except Exception as er:
            print(f"""\033[31m!–æ—à–∏–±–∫–∞! –õ–æ–≥ ‚Ññ{count}\n message: {message}
time: \033[36m{datetime.datetime.now()}\033[33m
where: {where}
full: {full}
comments: {comments}
error: {er}\033[0m""")


def keyboard_creator(list_of_names):
    """
    :param list_of_names: list; —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∫–Ω–æ–ø–æ–∫(['1', '2'] –±—É–¥–µ—Ç –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥)
    [['1', '2'], '3'] –ø–µ—Ä–≤—ã–µ 2 –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –Ω–∞ 1 –ª–∏–Ω–∏–∏, –∞ 3 —Å–Ω–∏–∑—É)
    :return: –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    """
    returned_k = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in list_of_names:
        if isinstance(i, list):
            string = ""
            for o in range(len(i) - 1):
                string += f"'{i[o]}', "
            string += f"'{i[-1]}'"
            exec(f"""returned_k.row({string})""")
            continue
        exec(f"""returned_k.row('{i}')""")
    return returned_k


def buttons_creator(dict_of_names, how_many_rows=7):
    """
    :param dict_of_names: dict; —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –ø–µ—Ä–≤—ã–µ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º–∏, –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —ç—Ç–∏—Ö –∫–ª—é—á–µ–π
           —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞—Ä–∏. –ü–µ—Ä–≤—ã–π –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç —ç—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∞ 2 —ç—Ç–æ callback_data(—Ç–æ —á—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤
           –∫–æ–ª–ª–±–µ–∫). –ù–∞–ø—Ä–∏–º–µ—Ä: {
                                   '1': {
                                       '—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏': '–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1',
                                       '—Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏': '–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 2'
                                       },
                                   '2': {
                                       '—Ç–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–π –∫–Ω–æ–ø–∫–∏': '–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 3'
                                       }
                               }
    :param how_many_rows: int; —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
    :return: –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    returned_k = types.InlineKeyboardMarkup(row_width=how_many_rows)
    for i in dict_of_names.keys():
        if type(dict_of_names[i]) is dict:
            count = 0
            for o in dict_of_names[i].keys():
                count += 1
                exec(
                    f"""button{count} = types.InlineKeyboardButton(text='{o}', callback_data='{dict_of_names[i][o]}')""")
            s = []
            for p in range(1, count + 1):
                s.append(f"button{p}")
            exec(f"""returned_k.add({', '.join(s)})""")
        else:
            exec(f"""button = types.InlineKeyboardButton(text='{i}', callback_data='{dict_of_names[i]}')""")
            exec(f"""returned_k.add(button)""")
    return returned_k


def update(message):
    """
    :param message: class; –æ—Ç–≤–µ—Ç –∏–∑ —Ç–≥(message_handler)
    """
    session = db_session.create_session()
    user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
    user.time = tconv(message.date)
    session.commit()


class Human:
    """
    —Å—É–ø–µ—Ä –ø—É–ø–µ—Ä –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è –º–æ—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    –≠—Ç–æ –∫–ª–∞—Å—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–æ –∏—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–¥–µ–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É.
    –ù–∞–ø—Ä–∏–º–µ—Ä:
    a = Human(name="–í–ª–∞–¥")
    b = Human(name="–í–∞—Å–∏–ª—å", teacher=True)
    """
    def __init__(self, **args):
        for i in args.keys():
            if type(args[i]) is str:
                exec(f"self.{i} = '{args[i]}'")
            else:
                exec(f"self.{i} = {args[i]}")


def clean_lower(line):
    """
    :param line: str; —Å—Ç—Ä–æ–∫–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –∫–∏–∫–Ω—É—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
    :return: –æ—Ç–≤–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    """
    global jobs
    line = str(line).lower()
    line = re.sub(r"[\\\/\.\,\?\!@\"\'#‚Ññ%^&\*\+\-;‚Äì:‚Äî\(\)\[\]\{\}\-_<>¬´¬ª]", " ", line).split()
    new_line = []
    line = set(line)
    for key, value in SINONIMS.items():
        if len(line.intersection(value)) > 0:
            new_line.append(key)
    new_line.extend(list(line.intersection(jobs)))
    return list(set(new_line))


def search(tg_id=-1):
    """
    :param tg_id: int; —Ç–≥ id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    :return: list; —Å–ø–∏—Å–æ–∫ –∏–∑ –º–æ–∏—Ö –≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤(Human())
    """
    try:
        list_of_peoples = []
        if tg_id == -1:
            # adekvatnaja hren, no ne sejchas
            session = db_session.create_session()
            users = session.query(People).all()
            for i in users:
                list_of_peoples.append(Human(id=i.id, job=i.job, salary=i.salary))
            return list_of_peoples
        else:
            session = db_session.create_session()
            jobler = session.query(Ban).filter(Ban.tg_id == tg_id).first()
            request_of_jobs = clean_lower(jobler.arg1.lower())
            users = session.query(People).all()
            request_of_jobs = set(request_of_jobs).intersection(jobs)
            part_1 = []
            part_2 = []
            part_3 = []
            part_4 = []
            for i in users:
                if len(request_of_jobs.intersection(set(i.tags.split()))) > 0:
                    p = (len(request_of_jobs.intersection(set(i.tags.split())))) / (len(request_of_jobs))
                    s = abs(int(jobler.arg3) - int(i.salary)) / 20000
                    np1 = np.array([0, 0, 0, 0])
                    np2 = np.array([0, 0, 0, 0])
                    for hz in i.employment.split():
                        if hz == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
                            np2[0] = 1
                        elif hz == "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
                            np2[1] = 1
                        elif hz == "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                            np2[2] = 1
                        elif hz == "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                            np2[3] = 1
                        elif hz == "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã":
                            np2 = np.array([1, 1, 1, 1])
                    if jobler.arg2 == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
                        np1[0] = 1
                    elif jobler.arg2 == "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
                        np1[1] = 1
                    elif jobler.arg2 == "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                        np1[2] = 1
                    elif jobler.arg2 == "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                        np1[3] = 1
                    elif jobler.arg2 == "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã":
                        np1 = np.array([1, 1, 1, 1])
                    if any(list(np1 * np2)):
                        e = 1
                    else:
                        e = 0.8
                    if i.salary <= int(jobler.arg3):
                        r = p + e + s
                    else:
                        r = p + e - s
                    if p >= 0.75:
                        part_1.append(Human(id=i.id, job=i.job, salary=i.salary, r=r))
                    elif p >= 0.5:
                        part_2.append(Human(id=i.id, job=i.job, salary=i.salary, r=r))
                    elif p >= 0.25:
                        part_3.append(Human(id=i.id, job=i.job, salary=i.salary, r=r))
                    elif p >= 0:
                        part_4.append(Human(id=i.id, job=i.job, salary=i.salary, r=r))
                    else:
                        log(message=None, where="–º–∞—Ö–∏–Ω–∞—Ü–∏–∏ —Å –ø–æ–∏—Å–∫–æ–º –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º", full=False,
                            comments=f"p = {p}")
            part_1.sort(key=lambda x: -x.r)
            part_2.sort(key=lambda x: -x.r)
            part_3.sort(key=lambda x: -x.r)
            part_4.sort(key=lambda x: -x.r)
            list_of_peoples.extend(part_1)
            list_of_peoples.extend(part_2)
            list_of_peoples.extend(part_3)
            list_of_peoples.extend(part_4)
            return list_of_peoples
    except Exception as ex:
        log(full=True, where="search", comments=str(ex))


def pdf(user_id):
    """
    —Å–æ–∑–¥–∞–Ω–∏–µ –ø–¥—Ñ, —ç—Ç–æ –¥–µ–ª–∞–ª –í–∞—Å–∏–ª—å, —Ç–∞–∫ —á—Ç–æ —è —Ö–∑
    :param user_id: int; –Ω–æ–º–µ—Ä —á–µ–ª–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã people
    """
    try:
        file = open('data/media/pdf.html', mode="w", encoding="utf-8")
    except Exception:
        file = open('/home/AVI2005/TelgrammBot/data/media/pdf.html', mode="w", encoding="utf-8")
    session = db_session.create_session()
    user = session.query(People).filter(People.id == user_id).first()
    text = f"""<!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    <img src="icon.png" style="float:left; height: 150px;">
    <div style="margin-left: 900px; padding-top: 1px; width: 500px;">
        <h2 style="font-family: Arial;">–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¢—é–º–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏</h2>
        <h3></h3>
        <h3><a href="https://tmn-it.ru/shkola-programmirovaniya/code@tmn-it.ru">https://tmn-it.ru/shkola-programmirovaniya/
            code@tmn-it.ru</a>
        </h3>
    </div>
    <h1 style="font-size: 40px; margin-top: 120px;" align="center">–†–µ–∑—é–º–µ</h1>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–§–ò–û</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.name}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–ñ–µ–ª–∞–µ–º–∞—è —Ä–∞–±–æ—Ç–∞</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.job}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.birth_date}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.phone}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.mail}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–ú–µ—Å—Ç–æ–∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.city}</p>
    <p style="margin-top: 100px; display: inline-block; width: 1300px;"></p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–§–æ—Ä–º–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.schedule}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.salary}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.experience}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.achievements}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.education}</p>
    <h1 style="vertical-align: top; display: inline-block; width: 300px; margin-left: 60px;">–û —Å–µ–±–µ</h1>
    <p style="display: inline-block; width: 900px; margin-left: 40px; font-size: 32px; text-align: justify;">{user.about_me}</p>
    </body>
    </html>"""
    for i in text.split("\n"):
        file.write(i + "\n")
    file.close()
    client = pdfcrowd.HtmlToPdfClient("AVI2005", "5ec73c962bac1db58b3e27d9dd183a86")
    client.setPageWidth("1400px")
    client.setPageHeight("2000px")
    client.convertFileToFile("data/media/pdf.html", 'data/media/resume.pdf')


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """
    –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–ª–∞ –≤ –¥—Ä—É–≥—É—é
    :param message: class, —Ç–≥ –≤–æ–∑—Ä–∞—â–∞–µ—Ç
    :return: –ø–µ—Ä–µ—Ö–æ–¥ –≤ vilka(message)
    """
    try:
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        try:
            if user.ban and user.count == 0:
                # video = open("data/media/–ë–ê–ù.mp4", "rb")
                bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                 reply_markup=types.ReplyKeyboardRemove())
                # bot.send_video(message.from_user.id, video)
                user.count += 1
                session.commit()
                return bot.register_next_step_handler(message, get_text_messages)
            elif user.ban and user.count != 0:
                return bot.register_next_step_handler(message, get_text_messages)
        except Exception:
            user = Ban()
            user.tg_id = message.from_user.id
            user.ban = False
            user.count = 0
            session.add(user)
            session.commit()
        update(message)
        log(message=message, where="get_text_messages")
        # answer = loginned(message)
        # try:
        #     if answer[0] == "r":
        #         return bot.register_next_step_handler(answer[1], register)
        #     try:
        #         answer = bool(answer)
        #     except Exception:
        #         bot.send_message(message.from_user.id,
        #                          f"–¢—ã –∑–∞–±–∞–Ω–µ–Ω, —Ç–µ—Ä—è–π—Å—è –∫–ª–æ—É–Ω")
        #         return 0
        # except Exception:
        #     pass
        # if not answer:
        #     if message.text in ["–ü—Ä–∏–≤–µ—Ç", "/start", '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']:
        #         keyboard = keyboard_creator([["–•–æ—Ä–æ—à–æ",
        #                                       "–ù–µ—Ç"]])
        #         bot.send_message(message.from_user.id,
        #                          f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.from_user.username if message.from_user.username else str(message.from_user.last_name) + ' ' + message.from_user.first_name}, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        #                          reply_markup=keyboard)
        #     elif message.text in ["–£–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–•–æ—Ä–æ—à–æ"]:
        #         keyboard = keyboard_creator(['–ò—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É', '–ò—Å–∫–∞—Ç—å –ª—é–¥–µ–π'])
        #         bot.send_message(message.from_user.id,
        #                          f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—ã –ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ")
        #         bot.send_message(message.from_user.id,
        #                          f"–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–Ω—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –ª—é–¥–µ–π –∏–ª–∏ –Ω–∞–Ω—è—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É?",
        #                          reply_markup=keyboard)
        #         return bot.register_next_step_handler(message, register)
        #     elif message.text == "–ù–µ—Ç":
        #         bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ")
        #     else:
        #         keyboard = keyboard_creator([["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
        #                                       "–ü—Ä–∏–≤–µ—Ç"],
        #                                      "–£–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"])
        #         bot.send_message(message.from_user.id,
        #                          "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–ü—Ä–µ–¥–∞–≥–∞—é –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å:\n–ü—Ä–∏–≤–µ—Ç\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n–£–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        #                          reply_markup=keyboard)
        # else:
        #     bot.send_message(message.from_user.id,
        #                      f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.from_user.username if message.from_user.username else message.from_user.last_name + ' ' + message.from_user.first_name}")
        #     return bot.register_next_step_handler(message, main_menu)
        keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                     "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
        # bot.send_message(message.from_user.id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ {emojize('‚¨Ü', use_aliases=True)}")
        bot.send_message(message.from_user.id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ")
        bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
        return bot.register_next_step_handler(message, vilka)
    except Exception as er:
        log(message=message, where="get_text_messages", comments=str(er))


def vilka(message):
    """
    –≤—ã–±–æ—Ä –≤–µ—Ç–∫–∏
    :param message: class; —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ –ø–æ –≤–µ—Ç–∫–µ, –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–∞–º—É –≤ —Å–µ–±—è
    """
    try:
        log(message=message, where="vilka")
        keyboard = keyboard_creator([f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        try:
            if user.ban and user.count == 0:
                video = open("data/media/–ë–ê–ù.mp4", "rb")
                bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.send_video(message.from_user.id, video)
                user.count += 1
                session.commit()
                return bot.register_next_step_handler(message, get_text_messages)
            elif user.ban and user.count != 0:
                return bot.register_next_step_handler(message, get_text_messages)
        except Exception:
            user = Ban()
            user.tg_id = message.from_user.id
            user.ban = False
            user.count = 0
            # user.time = tconv(message.date)
            session.add(user)
            session.commit()
        update(message)
        if message.text == "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞":
            bot.send_message(message.from_user.id,
                             f"–ö–∞–∫–∞—è —É –≤–∞—Å –≤–∞–∫–∞–Ω—Å–∏—è? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã",
                             reply_markup=keyboard)
            return bot.register_next_step_handler(message, staks)
        elif message.text == "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã":
            bot.send_message(message.from_user.id,
                             f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é.")
            return bot.register_next_step_handler(message, vilka)
        elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ":
            bot.send_message(message.from_user.id,
                             f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é.")
            return bot.register_next_step_handler(message, vilka)
        elif message.text == "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ":
            bot.send_message(message.from_user.id,
                             f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é.")
            return bot.register_next_step_handler(message, vilka)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è":
            bot.send_message(message.from_user.id,
                             f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é.")
            return bot.register_next_step_handler(message, vilka)
        else:
            bot.send_message(message.from_user.id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç.")
            return bot.register_next_step_handler(message, vilka)
    except Exception as er:
        log(message=message, full=True, where="vilka", comments=str(er))


def staks(message):
    """
    –≤–≤–æ–¥ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param message: class, —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –ø–µ—Ä–µ—Ö–æ–¥ –≤ employment(message)
    """
    try:
        log(message=message, where="staks")
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        try:
            if user.ban and user.count == 0:
                video = open("data/media/–ë–ê–ù.mp4", "rb")
                bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.send_video(message.from_user.id, video)
                user.count += 1
                session.commit()
                session.close()
                return bot.register_next_step_handler(message, get_text_messages)
            elif user.ban and user.count != 0:
                return bot.register_next_step_handler(message, get_text_messages)
        except Exception:
            user = Ban()
            user.tg_id = message.from_user.id
            user.ban = False
            user.count = 0
            # user.time = tconv(message.date)
            session.add(user)
            session.commit()
            session.close()
        update(message)
        keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                     "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
        if message.text in ["\\start", f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:
            keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                         "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
            bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
            return bot.register_next_step_handler(message, vilka)
        else:
            list_of_jobs = str(message.text).replace(";", " ").replace("/", " ").replace(
                "|", " ").replace("~", " ").replace(":", " ").replace("{", " ").replace("}", " ").replace("[",
                                                                                                          " ").replace(
                "]", " ").replace("+", " ").replace("-", " ")
            # nekotorie mohinacii c vvodom
            session = db_session.create_session()
            user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
            user.arg1 = list_of_jobs
            session.commit()
            session.close()
            keyboard = keyboard_creator(
                ["–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                 f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
            bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?", reply_markup=keyboard)
            return bot.register_next_step_handler(message,
                                                  employment)
    except Exception as er:
        log(message=message, full=True, where="staks", comments=str(er))


def employment(message):
    """
    –≤—ã–±–æ—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param message: class; —Ç–≥ –≤–æ–∑—Ä–∞—â–∞–µ—Ç
    :return: –ø–µ—Ä–µ—Ö–æ–¥ –≤ salary(message)
    """
    try:
        log(message=message, where="employment")
        keyboard = keyboard_creator(
            ["–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
             f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        try:
            if user.ban and user.count == 0:
                video = open("data/media/–ë–ê–ù.mp4", "rb")
                bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.send_video(message.from_user.id, video)
                user.count += 1
                session.commit()
                session.close()
                return bot.register_next_step_handler(message, get_text_messages)
            elif user.ban and user.ban and user.count != 0:
                return bot.register_next_step_handler(message, get_text_messages)
        except Exception:
            user = Ban()
            user.tg_id = message.from_user.id
            user.ban = False
            user.count = 0
            # user.time = tconv(message.date)
            session.add(user)
            session.commit()
            session.close()
        update(message)
        if message.text in [f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "\\start"]:
            keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                         "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
            bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
            return bot.register_next_step_handler(message, vilka)
        else:
            if message.text == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
                pass
            elif message.text == "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
                pass
            elif message.text == "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                pass
            elif message.text == "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
                pass
            elif message.text == "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã":
                pass
            else:
                bot.send_message(message.from_user.id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç.")
                return bot.register_next_step_handler(message, employment)
            keyboard = keyboard_creator([f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
            session = db_session.create_session()
            user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
            user.arg2 = message.text
            session.commit()
            session.close()
            bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=keyboard)
            return bot.register_next_step_handler(message, salary)
    except Exception as er:
        log(message=message, full=True, where="employment", comments=str(er))


def salary(message):
    """
    –≤–≤–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä(20000/20–∫/20k)
    :param message: class; —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ exit_to_vilka(message)
    """
    try:
        log(message=message, where="salary")
        keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                     "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        try:
            if user.ban and user.count == 0:
                video = open("data/media/–ë–ê–ù.mp4", "rb")
                bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.send_video(message.from_user.id, video)
                user.count += 1
                session.commit()
                return bot.register_next_step_handler(message, get_text_messages)
            elif user.ban and user.count != 0:
                return bot.register_next_step_handler(message, get_text_messages)
        except Exception:
            user = Ban()
            user.tg_id = message.from_user.id
            user.ban = False
            user.count = 0
            # user.time = tconv(message.date)
            session.add(user)
            session.commit()
        update(message)
        if message.text in [f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "\\start"]:
            keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                         "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
            bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
            return bot.register_next_step_handler(message, vilka)
        else:
            govnolist = re.findall(r"\b\d+k*\b", str(message.text).replace("–∫", "k"))
            govnolist = [str(i).replace("k", "000") for i in govnolist]
            govnolist = list(map(int, govnolist))
            if not govnolist:
                keyboard = keyboard_creator([f"{emojize(SMILE[0], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
                bot.send_message(message.from_user.id, f"–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ó–ü, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=keyboard)
                return bot.register_next_step_handler(message, salary)
            bot.send_message(message.from_user.id, f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫")
            user.arg3 = sum(govnolist) / len(govnolist)
            session.commit()
            list_poiska = search(message.from_user.id)
            if len(list_poiska) != 0:
                key_dict = {'1': {}}
                if len(list_poiska) > 5:
                    key_dict["1"]["<"] = "back"
                text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1}\n\n"
                _list = []
                for i in range(5 if len(list_poiska) >= 5 else len(list_poiska) % 5):
                    string = f"{1 + i}. {list_poiska[i].job}\n{list_poiska[i].salary} —Ä."
                    _list.append(string)
                text += "\n".join(_list)
                for i in range(1, len(_list) + 1):
                    key_dict["1"][f"{i}"] = f"{i}"
                # key_dict["1"]["2"] = "2"
                # key_dict["1"]["3"] = "3"
                # key_dict["1"]["4"] = "4"
                # key_dict["1"]["5"] = "5"
                if len(list_poiska) > 5:
                    key_dict["1"][">"] = "next"
                bot.send_message(message.from_user.id, text, reply_markup=buttons_creator(key_dict))
            else:
                text = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                bot.send_message(message.from_user.id, text)
                keyboard = keyboard_creator(
                    [["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                     "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
                bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
                return bot.register_next_step_handler(message, vilka)
            return bot.register_next_step_handler(message, exit_to_vilka)
            # return bot.register_next_step_handler(message, vilka, list_poiska)
    except Exception as er:
        log(message=message, full=True, where="salary", comments=str(er))


def exit_to_vilka(message):
    """
    —Ö–∑ —à–æ —ç—Ç–æ
    :param message: class; —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –ø–µ—Ä–µ—Ö–æ–¥ –≤ vilka(message)
    """
    try:
        log(message=message, where="exit_to_vilka")
        # session = db_session.create_session()
        # keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
        #                              "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
        # user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
        # try:
        #     if user.ban and user.count == 0:
        #         video = open("data/media/–ë–ê–ù.mp4", "rb")
        #         bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        #                          reply_markup=types.ReplyKeyboardRemove())
        #         bot.send_video(message.from_user.id, video)
        #         user.count += 1
        #         session.commit()
        #         return bot.register_next_step_handler(message, get_text_messages)
        #     elif user.count != 0:
        #         return bot.register_next_step_handler(message, get_text_messages)
        # except Exception:
        #     user = Ban()
        #     user.tg_id = message.from_user.id
        #     user.ban = False
        #     user.count = 0
        #     user.time = tconv(message.date)
        #     session.add(user)
        #     session.commit()
        # update(message)
        # bot.send_message(message.from_user.id, f"ss", reply_markup=keyboard)
        # return bot.register_next_step_handler(message, vilka)
        if message.text in [f"{emojize(SMILE[1], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "\\start"]:
            keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                         "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
            bot.send_message(message.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
            return bot.register_next_step_handler(message, vilka)
        return bot.register_next_step_handler(message, exit_to_vilka)
    except Exception as er:
        log(message=message, full=True, where="exit_to_vilka", comments=str(er))


def main_menu(message):
    """
    –Ω–µ —Ä–∞–±–∞–µ—Ç, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    :param message: class; —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –Ω–∏—á–µ–≥–æ
    """
    session = db_session.create_session()
    user = session.query(Ban).filter(Ban.tg_id == message.from_user.id).first()
    try:
        if user.ban and user.count == 0:
            video = open("data/media/–ë–ê–ù.mp4", "rb")
            bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.send_video(message.from_user.id, video)
            user.count += 1
            session.commit()
            return bot.register_next_step_handler(message, get_text_messages)
        elif user.ban and user.count != 0:
            return bot.register_next_step_handler(message, get_text_messages)
    except Exception:
        user = Ban()
        user.tg_id = message.from_user.id
        user.ban = False
        user.count = 0
        # user.time = tconv(message.date)
        session.add(user)
        session.commit()
    # log(message=message, where='main_menu')
    # answer = loginned(message)
    # try:
    #     answer = bool(answer)
    # except Exception:
    #     bot.send_message(message.from_user.id,
    #                      f"–¢—ã –∑–∞–±–∞–Ω–µ–Ω, —Ç–µ—Ä—è–π—Å—è –∫–ª–æ—É–Ω")
    #     return 0
    # if not answer:
    #     bot.send_message(message.from_user.id,
    #                      "–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–¥–æ?")
    #     return bot.register_next_step_handler(message, main_menu)
    # else:
    #     return bot.register_next_step_handler(message, main_menu)


@bot.callback_query_handler(
    func=lambda call: str(call.data).isdigit() or call.data in ['next', 'back', 'to start menu'])
def callback_worker(call):
    """
    —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–∞–º–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π
    :param call: class; —Ç–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    :return: –Ω–∏—á–µ–≥–æ
    """
    if call.data == "back":
        text = call.message.text.split("\n")
        now_page = int(text[0].split()[1])
        if now_page - 1 >= 1:
            text[0] = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {now_page - 1} –∏–∑ {int(text[0].split()[3])}"
            key_dict = {"1": {"<": "back"}}
            for gg in range(1, 6):
                key_dict["1"][f"{(now_page - 2) * 5 + gg}"] = f"{(now_page - 2) * 5 + gg}"
            key_dict["1"][">"] = "next"
            list_poiska = search(call.message.chat.id)
            text = text[: 2]
            for i in range(5 if len(list_poiska) >= 5 else len(list_poiska) % 5):
                text.append(
                    f"{1 + i}. {list_poiska[5 * (now_page - 2) + i].job}\n{int(list_poiska[5 * (now_page - 2) + i].salary)} —Ä.")
            text = "\n".join(text)
        else:
            text[0] = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {int(text[0].split()[3])} –∏–∑ {int(text[0].split()[3])}"
            list_poiska = search(call.message.chat.id)
            key_dict = {"1": {"<": "back"}}
            now_page = int(text[0].split()[3]) - 1
            for i in range((len(list_poiska) - 1) % 5 + 1):
                key_dict["1"][f"{now_page * 5 + 1 + i}"] = f"{now_page * 5 + 1 + i}"
            key_dict["1"][">"] = "next"
            text = text[: 2]
            for i in range((len(list_poiska) - 1) % 5 + 1):
                text.append(
                    f"{1 + i}. {list_poiska[5 * now_page + i].job}\n{int(list_poiska[5 * now_page + i].salary)} —Ä.")
            text = "\n".join(text)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons_creator(key_dict))
    elif call.data == "next":
        text = call.message.text.split("\n")
        list_poiska = search(call.message.chat.id)
        now_page = int(text[0].split()[1])
        if now_page + 1 <= int(text[0].split()[3]):
            if now_page + 1 != int(text[0].split()[3]):
                text[0] = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {now_page + 1} –∏–∑ {int(text[0].split()[3])}"
                key_dict = {"1": {"<": "back"}}
                for gg in range(1, 6):
                    key_dict["1"][f"{now_page * 5 + gg}"] = f"{now_page * 5 + gg}"
                key_dict["1"][">"] = "next"
                text = text[: 2]
                for i in range(5 if len(list_poiska) >= 5 else len(list_poiska) % 5):
                    text.append(
                        f"{1 + i}. {list_poiska[5 * now_page + i].job}\n{int(list_poiska[5 * now_page + i].salary)}  —Ä.")
                text = "\n".join(text)
            else:
                text[0] = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {now_page + 1} –∏–∑ {int(text[0].split()[3])}"
                key_dict = {"1": {"<": "back"}}
                for i in range((len(list_poiska) - 1) % 5 + 1):
                    key_dict["1"][f"{now_page * 5 + i + 1}"] = f"{now_page * 5 + 1 + i}"
                key_dict["1"][">"] = "next"
                text = text[: 2]
                for i in range((len(list_poiska) - 1) % 5 + 1):
                    text.append(
                        f"{1 + i}. {list_poiska[5 * now_page + i].job}\n{int(list_poiska[5 * now_page + i].salary)}  —Ä.")
                text = "\n".join(text)
        else:
            text[0] = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {int(text[0].split()[3])}"
            key_dict = {"1": {"<": "back"}}
            for gg in range(1, 6):
                key_dict["1"][f"{gg}"] = f"{gg}"
            key_dict["1"][">"] = "next"
            text = text[: 2]
            for i in range(5 if len(list_poiska) >= 5 else len(list_poiska) % 5):
                text.append(f"{1 + i}. {list_poiska[i].job}\n{int(list_poiska[i].salary)} —Ä.")
            text = "\n".join(text)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons_creator(key_dict))
    elif call.data == "to start menu":
        keyboard = keyboard_creator([["–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"], "–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                                     "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"])
        bot.send_message(call.message.chat.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
        return bot.register_next_step_handler(call.message, vilka)
    else:
        session = db_session.create_session()
        text = call.message.text.split("\n")
        now_page = int(text[0].split()[1])
        text = []
        nomer = int(call.data)
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        _list = search(tg_id=call.message.chat.id)
        chelik = session.query(People).filter(People.id == _list[nomer - 1].id).first()
        text.append(f"{chelik.job}")
        text.append("")
        text.append(f"{chelik.salary}")
        text.append(f"{chelik.employment}")
        text.append("")
        text.append(
            f"{chelik.experience if len(chelik.experience) <= 250 else f'{chelik.experience[: 250]}(–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∑—é–º–µ)'}")
        buttons = buttons_creator({"1": {
            f"{emojize(SMILE[0], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥": 'return',
            '–ö–æ–Ω—Ç–∞–∫—Ç—ã': 'cont',
            '–ü–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ': 'full'
        }})
        text = "\n".join(text)
        user.count = int(call.data)
        session.commit()
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons)
        # print(f"\033[0m{call.message.text}")


@bot.callback_query_handler(func=lambda call: call.data in ['return', "return1", 'cont', 'full', "about"])
def callback2(call):
    """
    —Ä–∞–±–æ—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–ø–∏—Å–∫–∞
    :param call:
    :return:
    """
    if call.data == 'return':
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        list_poiska = search(call.message.chat.id)
        key_dict = {"1": {"<": "back"}}
        text = call.message.text.split("\n")
        nomer = user.count
        text = [
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1} –∏–∑ {len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1}",
            ""]
        for i in range(5 if (len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1) != (
                nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1) else len(list_poiska) % 5):
            nomer1 = nomer // 5 - 1 if nomer % 5 == 0 else nomer // 5
            string = f"{1 + i}. {list_poiska[nomer1 * 5 + i].job}\n{int(list_poiska[nomer1 * 5 + i].salary)} —Ä."
            text.append(string)
        text = "\n".join(text)
        for i in range(5 if (len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1) != (
                nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1) else len(list_poiska) % 5):
            hz = nomer // 5 - 1 if nomer % 5 == 0 else nomer // 5
            key_dict["1"][f"{hz * 5 + i + 1}"] = f"{hz * 5 + i + 1}"
        key_dict["1"][">"] = "next"
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons_creator(key_dict))
    elif call.data == 'return1':
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        list_poiska = search(call.message.chat.id)
        key_dict = {"1": {"<": "back"}}
        nomer = user.count
        text = [
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1} –∏–∑ {len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1}",
            ""]
        for i in range(5 if (len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1) != (
                nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1) else len(list_poiska) % 5):
            nomer1 = nomer // 5 - 1 if nomer % 5 == 0 else nomer // 5
            string = f"{1 + i}. {list_poiska[nomer1 * 5 + i].job}\n{int(list_poiska[nomer1 * 5 + i].salary)} —Ä."
            text.append(string)
        text = "\n".join(text)
        for i in range(5 if (len(list_poiska) // 5 if len(list_poiska) % 5 == 0 else len(list_poiska) // 5 + 1) != (
                nomer // 5 if nomer % 5 == 0 else nomer // 5 + 1) else len(list_poiska) % 5):
            hz = nomer // 5 - 1 if nomer % 5 == 0 else nomer // 5
            key_dict["1"][f"{hz * 5 + i + 1}"] = f"{hz * 5 + i + 1}"
        key_dict["1"][">"] = "next"
        bot.send_message(call.message.chat.id, text, reply_markup=buttons_creator(key_dict))
    elif call.data == "about":
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        text = call.message.text.split("\n")
        text = []
        nomer = user.count
        _list = search(call.message.chat.id)
        chelik = session.query(People).filter(People.id == _list[nomer - 1].id).first()
        text.append(f"{chelik.job}")
        text.append("")
        text.append(f"{chelik.salary}")
        text.append(f"{chelik.employment}")
        text.append("")
        text.append(
            f"{chelik.experience if len(chelik.experience) <= 250 else f'{chelik.experience[: 250]}(–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∑—é–º–µ)'}")
        buttons = buttons_creator({"1": {
            f"{emojize(SMILE[0], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥": 'return',
            '–ö–æ–Ω—Ç–∞–∫—Ç—ã': 'cont',
            '–ü–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ': 'full'
        }})
        text = "\n".join(text)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons)
    elif call.data == 'cont':
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        data = Data()
        text = call.message.text.split("\n")
        text = []
        nomer = user.count
        text.append("–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        text.append("")
        _list = search(call.message.chat.id)
        chelik = session.query(People).filter(People.id == _list[nomer - 1].id).first()
        text.append(f"{chelik.name}")
        text.append(f"{chelik.phone}")
        text.append(f"{chelik.mail}")
        text = "\n".join(text)
        data.tg_id_boss = call.message.message_id
        data.arg1 = user.arg1
        data.arg2 = user.arg2
        data.arg3 = user.arg3
        data.tg_id_people = chelik.id
        session.add(data)
        buttons = buttons_creator({'1': {f"{emojize(SMILE[0], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥": 'about'}})
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=buttons)
    elif call.data == 'full':
        session = db_session.create_session()
        user = session.query(Ban).filter(Ban.tg_id == call.message.chat.id).first()
        nomer = user.count
        _list = search(call.message.chat.id)
        chelik = session.query(People).filter(People.id == _list[nomer - 1].id).first()
        pdf(chelik.id)
        data = Data()
        data.tg_id_boss = call.message.message_id
        data.arg1 = user.arg1
        data.arg2 = user.arg2
        data.arg3 = user.arg3
        data.tg_id_people = chelik.id
        session.add(data)
        buttons = buttons_creator({'1': {f"{emojize(SMILE[0], use_aliases=True)} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥": 'return1'}})
        bot.send_document(call.message.chat.id, open("data/media/resume.pdf", 'rb'), reply_markup=buttons)


for _ in range(10):
    try:
        print('\033[0mStarted.....')
        log()
        # bot.polling(none_stop=True)
        bot.infinity_polling()
    except Exception as err:
        print('\033[31mCrashed.....')
        print(f"Error: {err}")
        time.sleep(10)
        print('\033[35mRestarting.....')
